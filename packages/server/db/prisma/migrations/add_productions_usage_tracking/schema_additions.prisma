// Enhanced Usage Tracking System (Billing-Independent)
// This migration adds comprehensive usage tracking for internal analytics
// NO payment/billing logic - pure metrics collection

// ========= USAGE TRACKING ENUMS ========= //

enum UsageEventType {
  // Creative Productions Events
  CREATIVE_PROJECT_CREATED
  CREATIVE_PROJECT_UPDATED
  CREATIVE_PROJECT_DELETED
  CREATIVE_ASSET_UPLOADED
  CREATIVE_ASSET_DELETED
  CREATIVE_RENDER_REQUESTED
  CREATIVE_RENDER_COMPLETED
  CREATIVE_RENDER_FAILED
  CREATIVE_TASK_CREATED
  CREATIVE_TASK_COMPLETED
  CREATIVE_REVIEW_REQUESTED
  CREATIVE_REVIEW_COMPLETED

  // Production Events (Original Vertical)
  PRODUCTION_PROJECT_CREATED
  PRODUCTION_PROJECT_UPDATED
  PRODUCTION_TASK_CREATED
  PRODUCTION_BUDGET_ITEM_ADDED
  PRODUCTION_FILE_UPLOADED

  // Real Estate Events
  PROPERTY_CREATED
  PROPERTY_UPDATED
  PROPERTY_PUBLISHED
  LEAD_CREATED
  LEAD_CONVERTED

  // E-Commerce Events
  ECOMMERCE_LEAD_CREATED
  CAMPAIGN_CREATED
  CAMPAIGN_LAUNCHED

  // Platform Events
  USER_LOGIN
  USER_LOGOUT
  API_REQUEST
  INTEGRATION_SYNC
}

enum UsageCategory {
  STORAGE      // File storage (assets, documents)
  COMPUTE      // Render jobs, AI processing
  API          // API calls
  PROJECTS     // Project/lead/campaign creation
  FEATURES     // Feature usage
}

// ========= USAGE TRACKING MODELS ========= //

// Main usage event log - captures all user actions
model UsageEvent {
  id             String           @id @default(cuid())

  // User/Organization context
  ownerUid       String
  organizationId String
  userId         String?          // Specific user who triggered (if available)

  // Event details
  eventType      UsageEventType
  category       UsageCategory
  vertical       Vertical?        // Which vertical (PRODUCTION, REAL_ESTATE, etc.)

  // Resource tracking
  resourceType   String?          // "CreativeProject", "CreativeAsset", "Property", etc.
  resourceId     String?          // ID of the resource

  // Quantitative metrics
  quantity       Int              @default(1)     // Count (e.g., 1 project, 5 assets)
  storageBytes   BigInt?                          // Storage used in bytes
  computeSeconds Int?                             // Compute time in seconds

  // Metadata (flexible JSON for context)
  metadata       Json?            // { assetType: "VIDEO", duration: 120, resolution: "1080p" }

  // Attribution
  source         String?          // "web", "api", "mobile"
  userAgent      String?          // Browser/client info
  ipAddress      String?          // For fraud detection

  // Timestamps
  createdAt      DateTime         @default(now())

  @@index([ownerUid])
  @@index([organizationId])
  @@index([eventType])
  @@index([category])
  @@index([vertical])
  @@index([createdAt])
  @@index([organizationId, createdAt])
  @@index([ownerUid, eventType])
  @@index([resourceType, resourceId])
}

// Aggregated usage summary per organization per day
model UsageSummary {
  id             String        @id @default(cuid())

  // Organization context
  organizationId String
  ownerUid       String
  vertical       Vertical?

  // Time period
  date           DateTime      @db.Date  // Daily aggregation

  // Aggregated metrics
  totalProjects      Int       @default(0)
  totalAssets        Int       @default(0)
  totalRenders       Int       @default(0)
  totalStorageBytes  BigInt    @default(0)
  totalComputeSeconds Int      @default(0)
  totalApiCalls      Int       @default(0)

  // Breakdown by category (JSON for flexibility)
  breakdown      Json?         // { video_assets: 5, image_assets: 12, renders_completed: 3 }

  // Timestamps
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([organizationId, date])
  @@index([organizationId])
  @@index([date])
  @@index([ownerUid])
  @@index([vertical])
  @@index([organizationId, date, vertical])
}

// Storage quota tracking (per organization)
model StorageQuota {
  id             String        @id @default(cuid())
  organizationId String        @unique

  // Current usage
  usedBytes      BigInt        @default(0)
  assetCount     Int           @default(0)

  // Breakdown by asset type
  videoBytes     BigInt        @default(0)
  imageBytes     BigInt        @default(0)
  audioBytes     BigInt        @default(0)
  documentBytes  BigInt        @default(0)
  otherBytes     BigInt        @default(0)

  // Last calculated
  lastCalculated DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([organizationId])
  @@index([usedBytes])
}

// Render job queue tracking (for Productions vertical)
model RenderQueue {
  id             String               @id @default(cuid())

  // Project context
  projectId      String
  renderId       String               // Links to CreativeRender
  organizationId String
  ownerUid       String

  // Job details
  status         CreativeRenderStatus @default(QUEUED)
  priority       Int                  @default(0)  // Higher = more urgent
  format         CreativeRenderFormat

  // Processing metrics
  startedAt      DateTime?
  completedAt    DateTime?
  computeSeconds Int?                 // Actual compute time
  errorMessage   String?

  // Worker info
  workerId       String?              // Which worker processed this
  retryCount     Int                  @default(0)
  maxRetries     Int                  @default(3)

  // Timestamps
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  @@index([status])
  @@index([priority, status])
  @@index([organizationId])
  @@index([createdAt])
  @@index([renderId])
}

// Feature usage tracking (which features are actually used)
model FeatureUsage {
  id             String        @id @default(cuid())

  // Organization context
  organizationId String
  ownerUid       String
  vertical       Vertical

  // Feature identification
  featureName    String        // "ai_property_search", "render_video", "lead_import"

  // Usage count
  usageCount     Int           @default(1)
  lastUsedAt     DateTime      @default(now())

  // First use
  firstUsedAt    DateTime      @default(now())

  @@unique([organizationId, vertical, featureName])
  @@index([organizationId])
  @@index([vertical])
  @@index([featureName])
  @@index([lastUsedAt])
}
