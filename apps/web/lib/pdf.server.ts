import PDFDocument from 'pdfkit';

export async function generatePerformancePDF(report: {
  storeDomain: string;
  performanceScore: number;
  seoScore: number;
  ttfb: number;
  lcp: number;
  cls: number;
  fid: number;
  recommendations: Array<{
    category: string;
    issue: string;
    solution: string;
    priority: 'high' | 'medium' | 'low';
  }>;
  createdAt: string;
}): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument({ size: 'A4', margin: 50 });
    const chunks: Buffer[] = [];

    doc.on('data', (chunk) => chunks.push(chunk));
    doc.on('end', () => resolve(Buffer.concat(chunks)));
    doc.on('error', reject);

    // Header
    doc
      .fontSize(24)
      .font('Helvetica-Bold')
      .text('Performance Audit Report', { align: 'center' });

    doc.moveDown();
    doc
      .fontSize(14)
      .font('Helvetica')
      .text(`Store: ${report.storeDomain}`, { align: 'center' });

    doc
      .fontSize(10)
      .text(`Generated: ${new Date(report.createdAt).toLocaleString()}`, {
        align: 'center',
      });

    doc.moveDown(2);

    // Scores Section
    doc.fontSize(16).font('Helvetica-Bold').text('Scores', { underline: true });
    doc.moveDown();

    const scores = [
      { label: 'Performance Score', value: report.performanceScore, suffix: '/100' },
      { label: 'SEO Score', value: report.seoScore, suffix: '/100' },
      { label: 'Time to First Byte', value: report.ttfb?.toFixed(2), suffix: 's' },
      { label: 'Largest Contentful Paint', value: report.lcp?.toFixed(2), suffix: 's' },
      { label: 'Cumulative Layout Shift', value: report.cls?.toFixed(3), suffix: '' },
      { label: 'First Input Delay', value: report.fid?.toFixed(0), suffix: 'ms' },
    ];

    scores.forEach((score) => {
      doc
        .fontSize(12)
        .font('Helvetica')
        .text(`${score.label}: `, { continued: true })
        .font('Helvetica-Bold')
        .text(`${score.value}${score.suffix}`);
    });

    doc.moveDown(2);

    // Recommendations Section
    doc
      .fontSize(16)
      .font('Helvetica-Bold')
      .text('Recommendations', { underline: true });
    doc.moveDown();

    const priorityOrder = { high: 1, medium: 2, low: 3 };
    const sortedRecs = [...report.recommendations].sort(
      (a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]
    );

    sortedRecs.forEach((rec, index) => {
      const priorityColor =
        rec.priority === 'high' ? '#EF4444' : rec.priority === 'medium' ? '#F59E0B' : '#10B981';

      doc
        .fontSize(12)
        .font('Helvetica-Bold')
        .fillColor(priorityColor)
        .text(`${index + 1}. [${rec.priority.toUpperCase()}] ${rec.category}`, {
          continued: false,
        });

      doc
        .fontSize(10)
        .font('Helvetica')
        .fillColor('black')
        .text(`Issue: ${rec.issue}`, { indent: 20 });

      doc.text(`Solution: ${rec.solution}`, { indent: 20 });

      doc.moveDown(0.5);
    });

    doc.moveDown(2);

    // Footer
    doc
      .fontSize(8)
      .font('Helvetica')
      .fillColor('#6B7280')
      .text('Generated by Effinity E-Commerce Platform', {
        align: 'center',
      });

    doc.end();
  });
}
