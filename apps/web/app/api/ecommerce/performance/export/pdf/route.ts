import { NextRequest, NextResponse } from 'next/server';
import { getCurrentUser } from '@/lib/auth.server';
import { prisma } from '@/lib/prisma.server';

export const dynamic = 'force-dynamic';

export async function GET(request: NextRequest) {
  try {
    const currentUser = await getCurrentUser(request);

    if (!currentUser) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const reportId = searchParams.get('reportId');

    if (!reportId) {
      return NextResponse.json({ error: 'Report ID is required' }, { status: 400 });
    }

    const report = await prisma.ecomPerfReport.findFirst({
      where: {
        id: reportId,
        ownerUid: currentUser.uid,
      },
    });

    if (!report) {
      return NextResponse.json({ error: 'Report not found' }, { status: 404 });
    }

    // In production, use a PDF library like puppeteer or pdfkit
    // For now, generate a simple text-based report
    const pdfContent = `
Performance Report
==================
Store: ${report.storeDomain}
Date: ${new Date(report.createdAt).toLocaleString()}

Metrics:
--------
Performance Score: ${report.performanceScore}/100
SEO Score: ${report.seoScore}/100
Time to First Byte: ${report.ttfb?.toFixed(2)}s
Largest Contentful Paint: ${report.lcp?.toFixed(2)}s
Cumulative Layout Shift: ${report.cls?.toFixed(3)}
First Input Delay: ${report.fid?.toFixed(0)}ms

Recommendations:
----------------
${Array.isArray(report.recommendations)
  ? (report.recommendations as any[])
      .map((rec, i) => `
${i + 1}. [${rec.priority?.toUpperCase()}] ${rec.category}
   Issue: ${rec.issue}
   Solution: ${rec.solution}
`)
      .join('\n')
  : 'No recommendations available'
}

---
Generated by Effinity E-Commerce Platform
`.trim();

    // Return as downloadable text file (in production, use proper PDF)
    return new NextResponse(pdfContent, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="performance-report-${report.storeDomain}-${Date.now()}.txt"`,
      },
    });
  } catch (error) {
    console.error('[GET /api/ecommerce/performance/export/pdf] Error:', error);
    return NextResponse.json(
      { error: 'Failed to export PDF' },
      { status: 500 }
    );
  }
}
